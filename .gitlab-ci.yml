# SPDX-FileCopyrightText: 2025 German Aerospace Center <amiris@dlr.de>
#
# SPDX-License-Identifier: CC0-1.0

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == "main"
      when: never
    - when: always

stages:
  - changelog
  - lint
  - test
  - compatibility
  - deploy

default:
  image: maven:3-eclipse-temurin-11

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line. `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds. Used at every stage unless explicitly defined otherwise.
cache:
  key: $CI_COMMIT_REF_SLUG # reuse cache throughout all pipelines of the same branch
  paths: [".m2/repository"]


# Ensure CHANGELOG.md was updated
lint:changelog:
  stage: changelog
  cache: [] # do not use cached files here, as those are not required
  script:
    - git fetch
    - 'echo "Base is: $CI_MERGE_REQUEST_DIFF_BASE_SHA"'
    - CHANGELOG_CHANGED=$(git diff --name-only $CI_MERGE_REQUEST_DIFF_BASE_SHA...HEAD CHANGELOG.md)
    - 'if [[ "CHANGELOG.md" == $CHANGELOG_CHANGED ]]; then exit 0; else echo "No changes found in CHANGELOG.md compared to target branch."; exit 1; fi'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"


# Include reuse-test to check if all files comply with the reuse software requirements: https://reuse.software/dev/
lint:reuse:
  stage: lint
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  cache: [] # do not use cached files here, as those will be assessed by the reuse linter
  script:
    - reuse lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_REF_NAME == "main"


# Check if javadoc building works
lint:javadoc:
  stage: lint
  cache: [] # do not use cached files here, as maven will not build the project
  script:
    - "mvn '-Dmaven.javadoc.failOnWarnings=true' javadoc:javadoc"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_REF_NAME == "main"

# Ensure files follow common code style using "spotless"
lint:spotless:
  stage: lint
  dependencies: []
  script: ["mvn spotless:check"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_REF_NAME == "dev"
    - if: $CI_COMMIT_REF_NAME == "main"


# Settings for unit tests & coverage analysis
.unittest:
  script: ['mvn $MAVEN_CLI_OPTS test']
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_REF_NAME == "dev"
    - if: $CI_COMMIT_REF_NAME == "main"

# Execute unit tests with JDK11
test:Coverage:jdk11:
  extends: .unittest
  stage: test
  after_script:
    - "cat target/site/jacoco/index.html | grep -o 'Total[^%]*%' | grep -o '[0-9.,]* of [0-9.,]*' | sed 's/[,.]//g' | sed 's/ of / /g' | awk '{printf \"COVERAGE::%.2f\\n\", ((1.0 - ($1 / $2)) *100)}'"
  coverage: '/COVERAGE::\d+\.\d+/'


.compatibility:
  extends: .unittest
  stage: compatibility

# Execute unit tests with other JDKs
compatibility:jdk17:
  extends: .compatibility
  image: maven:3-eclipse-temurin-17

compatibility:jdk21:
  extends: .compatibility
  image: maven:3-eclipse-temurin-21


# Package AMIRIS & build javadoc
deploy:jdk11:
  stage: deploy
  script: ['mvn $MAVEN_CLI_OPTS package', 'mvn javadoc:javadoc']
  artifacts:
    paths: ["target/*.jar", "target/reports/apidocs"]
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"

# Publish javadoc to pages
pages:
  stage: .post
  script: ["mkdir public", "cp -r target/reports/apidocs/* public"]
  artifacts:
    paths: [public]
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
